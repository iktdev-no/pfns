name: Build

on:
  release:
    types: [created]

jobs:
  pre-check:
    runs-on: ubuntu-latest
    outputs:
      shouldBuildWeb:  ${{ steps.determine_web.outputs.shouldBuildWeb }}
      web:             ${{ steps.checkAppChanges.outputs.web }}
      backend:         ${{ steps.checkAppChanges.outputs.backend }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        name: "Detect app changes"
        id: checkAppChanges
        with:
          base: ''
          filters: |
            backend:
              - 'src/**'
            web:
              - 'web/**'
              
      - name: Lookup cached web build (lookup-only)
        id: web_cache_lookup
        uses: actions/cache@v3
        with:
          path: web/build
          key: web-build-${{ hashFiles('web/**/*') }}
          lookup-only: true

      - name: Determine if web build is needed
        id: determine_web
        run: |
          echo "Cache hit: ${{ steps.web_cache_lookup.outputs.cache-hit }}"
          echo "Web changes detected: ${{ steps.checkAppChanges.outputs.web }}"
          if [ "${{ steps.checkAppChanges.outputs.web }}" = "true" ] || [ "${{ steps.web_cache_lookup.outputs.cache-hit }}" != "true" ]; then
            echo "shouldBuildWeb=true" >> $GITHUB_OUTPUT
          else
            echo "shouldBuildWeb=false" >> $GITHUB_OUTPUT
          fi

      # Step to print the outputs from "pre-check" job
      - name: Print Outputs from pre-check job
        run: |
          echo "Apps\n"
          echo "backend:         ${{ steps.checkAppChanges.outputs.backend }}"
          echo "web:             ${{ steps.checkAppChanges.outputs.web }}"
          echo "${{ steps.checkAppChanges.outputs }}"

  build-web:
    runs-on: ubuntu-latest
    needs:
      - pre-check
    if: ${{ needs.pre-check.outputs.web == 'true' || needs.pre-check.outputs.shouldBuildWeb == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Restore cached web build
        id: web_cache
        uses: actions/cache@v3
        with:
          path: web/build
          # Genererer nøkkel basert utelukkende på innholdet i web/, 
          # slik at enhver endring i filene gir en ny nøkkel.
          key: web-build-${{ hashFiles('web/**/*') }}
          # Vi dropper restore-keys slik at vi aldri faller tilbake til en eldre cache
          
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install dependencies
        run: npm install
        working-directory: ./web/

      - name: Build React app
        run: | 
          export CI=false
          npm run build
        working-directory: ./web/

      - name: Save new web build to cache
        if: steps.web_cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: web/build
          key: web-build-${{ hashFiles('web/**/*') }}        

  build-backend:
    runs-on: ubuntu-latest
    needs:
      - pre-check
      - build-web
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore cached web build
        uses: actions/cache@v3
        with:
          path: web/build
          key: web-build-${{ hashFiles('web/**/*') }}

      - name: Copy web build files into Spring Boot static resources
        run: |
          mkdir -p ./backend/src/main/resources/static
          cp -r ./web/build/* ./backend/src/main/resources/static

      - name: Restore Gradle cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-cache-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            gradle-cache-

      - name: Restore backend build cache
        id: backend_cache
        uses: actions/cache@v3
        with:
          path: backend/build
          key: backend-build-${{ hashFiles('backend/**/*') }}
          restore-keys: |
            backend-build-
      
      - name: Build Spring Boot backend
        run: |
          chmod +x ./gradlew
          ./gradlew :apps:ui:bootJar
          echo "Build completed"          

      - name: Save new backend build to cache
        if: steps.backend_cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: backend/build
          key: backend-build-${{ hashFiles('backend/**/*') }}
          
      - name: Upload bootJar artifact
        uses: actions/upload-artifact@v3
        with:
          name: bootJar
          path: ./build/libs/app.jar

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from build.gradle.kts
        id: extract_version
        run: |
          VERSION=$(cat ./build.gradle.kts | grep '^version\s*=\s*\".*\"' | sed 's/^version\s*=\s*\"\(.*\)\"/\1/')
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download bootJar artifact
        uses: actions/download-artifact@v3
        with:
          name: bootJar
          path: ./


      - name: Generate Docker image tag
        id: docker-tag
        run: echo "::set-output name=tag::$(date -u +'%Y.%m.%d')-$(uuidgen | cut -c 1-8)"

      - name: Docker login
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_HUB_NAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Debug Check extracted version
        run: | 
          echo "Extracted version: ${{ env.VERSION }}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./dockerfiles/DebianJava
          build-args: |
            MODULE_NAME=ui
            PASS_APP_VERSION=${{ env.VERSION }}
          push: true
          tags: |
            bskjon/pfns:latest
            bskjon/pfns:v1-${{ github.sha }}
            bskjon/pfns:v1-${{ steps.docker-tag.outputs.tag }}          
